//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ResourceDA.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Runtime.CompilerServices;

    public partial class Medium : INotifyPropertyChanged
    {
        string _Describe, _Time, _Directors, _Source, _Actor, _Name, _Poster;
        int? _Likes, _Genre;
        double? _IMDB;
        System.DateTime? _PostedDate;
        public string Describe
        {
            get => _Describe;
            set
            {
                if (_Describe != value)
                {
                    _Describe = value;
                    OnPropertyChanged();
                }
            }
        }
        public int Id { get; set; }
        public string Time
        {
            get => _Time;
            set
            {
                if (_Time != value)
                {
                    _Time = value;
                    OnPropertyChanged();
                }
            }
        }
        public string Directors
        {
            get => _Directors;
            set
            {
                if (_Directors != value)
                {
                    _Directors = value;
                    OnPropertyChanged();
                }
            }
        }
        public string Source
        {
            get => _Source;
            set
            {
                if (_Source != value)
                {
                    _Source = value;
                    OnPropertyChanged();
                }
            }
        }
        public Nullable<System.DateTime> PostedDate
        {
            get => _PostedDate;
            set
            {
                if (_PostedDate != value )
                {
                    _PostedDate = value;
                    OnPropertyChanged();
                }
            }
        }
        public string Actor
        {
            get => _Actor;
            set
            {
                if (_Actor != value)
                {
                    _Actor = value;
                    OnPropertyChanged();
                }
            }
        }
        public Nullable<double> IMDB
        {
            get => _IMDB;
            set
            {
                if (_IMDB != value )
                {
                    _IMDB = (double)value;
                    OnPropertyChanged();
                }
            }
        }
        public Nullable<int> Likes
        {
            get => _Likes;
            set
            {
                if (_Likes != value )
                {
                    _Likes = (int)value;
                    OnPropertyChanged();
                }
            }
        }
        public Nullable<int> Genre
        {
            get => _Genre;
            set
            {
                if (_Genre != value )
                {
                    _Genre = value;
                    OnPropertyChanged();
                }
            }
        }
        public string Name
        {
            get => _Name;
            set
            {
                if (_Name != value)
                {
                    _Name = value;
                    OnPropertyChanged();
                }
            }
        }

        public string Poster
        {
            get => _Poster;
            set
            {
                if (_Poster != value)
                {
                    _Poster = value;
                    OnPropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        void OnPropertyChanged([CallerMemberName] string propertyName = "")
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
